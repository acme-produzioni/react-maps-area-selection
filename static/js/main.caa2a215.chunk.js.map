{"version":3,"sources":["../../src/components/SearchCity/index.tsx","../../src/index.tsx","App.tsx","index.tsx"],"names":["SearchCity","maps","onPlaceChanged","React","googleMaps","setGoogleMaps","autocompleteInput","place","googleAutocomplete","lat","lng","console","fields","strictBounds","types","className","styles","type","ref","DEFAULT_OPTIONS","ReactMapsAreaSelection","setPolygon","map","path","polygon","editable","draggable","strokeColor","options","strokeOpacity","strokeWeight","deleteMenu","DeleteMenu","document","menu","google","onAdd","this","e","onRemove","close","draw","position","get","projection","point","open","removeVertex","vertex","OverlayView","apiKey","center","CENTER_FOLIGNO","onChange","GMapsAPI","setGMapsAPI","vertices","verticiesObj","i","getVertexPoints","style","width","height","onClick","polygonChanged","bootstrapURLKeys","key","libraries","defaultCenter","defaultZoom","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","mapObj","PropTypes","string","isRequired","App","useState","setVertex","value","toString","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.caa2a215.chunk.js","sourcesContent":["import * as React from 'react'\nimport styles from './styles.css'\n\ninterface Props {\n   onPlaceChanged: (newCenter : google.maps.LatLngLiteral) => void\n   maps : any\n  }\n\nlet googleAutocomplete : google.maps.places.Autocomplete;\n\nconst SearchCity = ({ maps, onPlaceChanged }: Props) => {\n\n    const [googleMaps, setGoogleMaps] = React.useState();\n    const autocompleteInput = React.useRef(null);\n\n    React.useEffect(() => {\n        console.log('sc', maps);\n        \n        if(!maps || googleMaps !== undefined || autocompleteInput.current === null) return;\n\n        setGoogleMaps(maps);\n\n        const options = {\n            //componentRestrictions: { country: \"it\" },\n            fields: [\"formatted_address\", \"geometry\", \"name\"],           \n            strictBounds: false,\n            types: [\"geocode\"],\n          } as google.maps.places.AutocompleteOptions;\n\n        googleAutocomplete = new maps.places.Autocomplete(autocompleteInput.current, options)\n\n        googleAutocomplete.addListener(\"place_changed\", placeChanged);\n\n    }, [maps, autocompleteInput.current])\n\n    function placeChanged()\n    {\n        const place = googleAutocomplete.getPlace().geometry?.location;\n\n        if(place === undefined) return;\n\n        onPlaceChanged({\n            lat: place.lat(),\n            lng: place.lng()\n        })\n    }    \n\n\n    return ( \n      <div        \n        className={styles.searchCityWrapper}>        \n          <input type=\"text\" className={styles.gmapsAutocomplete} ref={autocompleteInput}/>\n        \n      </div>\n    )\n  }\n\nexport default SearchCity;","import * as React from 'react'\nimport SearchCity from './components/SearchCity';\nimport GoogleMapReact from 'google-map-react';\nimport styles from './styles.module.css';\nimport PropTypes from 'prop-types';\n\ntype GMapsAPI = {\n  map: google.maps.Map, \n  maps: any\n}\n\ninterface AreaSelectionOptions {\n  width?: string|number,\n  height?: string|number,\n  strokeColor?: string,\n}\n\ninterface Props {\n  apiKey: string,\n  options?: AreaSelectionOptions,  \n  center?: google.maps.LatLngLiteral\n  onChange: (vertex : number[]) => any\n}\n\nlet polygon : google.maps.Polygon;\n\nconst DEFAULT_OPTIONS = {\n  width: '100%',\n  height: '400px',\n  strokeColor: '#7f101d'\n}\n\nconst ReactMapsAreaSelection = ({ apiKey, options, center = CENTER_FOLIGNO, onChange }: Props) => {\n\n  const [GMapsAPI, setGMapsAPI] = React.useState<GMapsAPI>();\n\n  const handleApiLoaded = (mapObj: GMapsAPI ) : void => \n  {\n    setGMapsAPI(mapObj)\n    setPolygon(mapObj);    \n  }\n\n\n  async function setPolygon({map, maps} : GMapsAPI) : Promise<any>\n  {\n    const {lat, lng} = map.getCenter()?.toJSON() as google.maps.LatLngLiteral;\n\n    const path = [\n      new maps.LatLng(lat+0.01, lng+0.01),\n      new maps.LatLng(lat+0.01, lng-0.01),\n      new maps.LatLng(lat-0.01, lng-0.01),\n      new maps.LatLng(lat-0.01, lng+0.01)\n    ]\n\n    if(polygon) polygon.setMap(null)\n\n    polygon = new maps.Polygon({\n      path: path,\n      editable: true,\n      draggable: false,\n      strokeColor: options?.strokeColor||DEFAULT_OPTIONS.strokeColor,\n      strokeOpacity: 1.0,\n      strokeWeight: 2,\n      map: map\n    });\n\n\n    class DeleteMenu extends google.maps.OverlayView {\n\n      private div_: HTMLDivElement;\n      private divListener_?: google.maps.MapsEventListener;\n    \n      constructor() { \n        super();\n        this.div_ = document.createElement(\"div\");\n        this.div_.className = styles.deleteMenu;\n        this.div_.innerHTML = `Elimina`;\n    \n        const menu = this;\n        google.maps.event.addDomListener(this.div_, \"click\", () => {\n          menu.removeVertex();\n        });\n      }\n    \n      onAdd() {\n        const deleteMenu = this;\n        const map = this.getMap() as google.maps.Map;\n        this.getPanes()!.floatPane.appendChild(this.div_);\n    \n        // mousedown anywhere on the map except on the menu div will close the\n        // menu.\n        this.divListener_ = google.maps.event.addDomListener(\n          map.getDiv(),\n          \"mousedown\",\n          (e: Event) => {\n            if (e.target != deleteMenu.div_) {\n              deleteMenu.close();\n            }\n          },\n          true\n        );\n      }\n    \n      onRemove() {\n        if (this.divListener_) {\n          google.maps.event.removeListener(this.divListener_);\n        }\n    \n        (this.div_.parentNode as HTMLElement).removeChild(this.div_);\n    \n        // clean up\n        this.set(\"position\", null);\n        this.set(\"path\", null);\n        this.set(\"vertex\", null);\n      }\n    \n      close() {\n        this.setMap(null);\n      }\n    \n      draw() {\n        const position = this.get(\"position\");\n        const projection = this.getProjection();\n    \n        if (!position || !projection) {\n          return;\n        }\n    \n        const point = projection.fromLatLngToDivPixel(position)!;\n        this.div_.style.top = point.y + \"px\";\n        this.div_.style.left = point.x + \"px\";\n      }\n    \n      /**\n       * Opens the menu at a vertex of a given path.\n       */\n      open(\n        map: google.maps.Map,\n        path: google.maps.MVCArray<google.maps.LatLng>,\n        vertex: number\n      ) {\n        this.set(\"position\", path.getAt(vertex));\n        this.set(\"path\", path);\n        this.set(\"vertex\", vertex);\n        this.setMap(map);\n        this.draw();\n      }\n    \n      /**\n       * Deletes the vertex from the path.\n       */\n      removeVertex() {\n        const path = this.get(\"path\");\n        const vertex = this.get(\"vertex\");\n    \n        if (!path || vertex == undefined) {\n          this.close();\n          return;\n        }\n    \n        path.removeAt(vertex);\n        this.close();\n      }\n    }\n    \n\n    const deleteMenu = new DeleteMenu();\n\n    maps.event.addListener(polygon, \"click\", (e:any) => {\n      if (e.vertex == undefined || polygon.getPath().getLength() < 4) {\n        return;\n      }\n      deleteMenu.open(map, polygon.getPath(), e.vertex);\n    });\n\n    maps.event.addListener(polygon, 'click', polygonChanged)\n    maps.event.addListener(polygon, 'mouseup', polygonChanged)\n\n  }\n\n  function onPlaceChanged(newCenter : google.maps.LatLngLiteral)\n  {\n    if(!GMapsAPI) return \n\n    GMapsAPI.map.setCenter(newCenter);\n    setPolygon(GMapsAPI)\n  }\n\n  function resetPolygon()\n  {\n    if(!GMapsAPI) return \n    setPolygon(GMapsAPI)\n    polygonChanged();\n  }\n\n  function polygonChanged()\n  {\n    onChange(getVertexPoints())\n  }\n\n  \n  function getVertexPoints() : number[] {\n    // Since this polygon has only one path, we can call getPath() to return the\n    // MVCArray of LatLngs.\n    const vertices = polygon.getPath();\n    const verticiesObj : number[] = [];\n  \n    // Iterate over the vertices.\n    for (let i = 0; i < vertices.getLength(); i++) {\n      verticiesObj.push(vertices.getAt(i));  \n    }\n   \n    return verticiesObj;\n  } \n\n  return ( \n    <div \n      className={styles.mapWrapper}        \n      style={{\n        width: options?.width||DEFAULT_OPTIONS.width, \n        height: options?.height||DEFAULT_OPTIONS.height\n      }}\n    >\n      <div className={styles.panelTool}>\n        <SearchCity maps={GMapsAPI?.maps} onPlaceChanged={onPlaceChanged} />\n        <button onClick={resetPolygon}>Reset</button>\n      </div>\n\n      <GoogleMapReact\n        bootstrapURLKeys={{ \n          key: apiKey,\n          libraries: [\"places\", \"visualization\"] \n        }}\n        defaultCenter={center}\n        defaultZoom={12}\n        yesIWantToUseGoogleMapApiInternals\n        onGoogleApiLoaded={handleApiLoaded}\n      >\n      </GoogleMapReact>\n    </div>\n  )\n}\nconst CENTER_FOLIGNO = {lat: 42.958433, lng: 12.709864}\n\nReactMapsAreaSelection.propTypes = {\n  apiKey: PropTypes.string.isRequired,\n  options: PropTypes.shape({\n    width: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    height: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    strokeColor: PropTypes.string,\n  }),\n  center: PropTypes.exact({\n    lat: PropTypes.number.isRequired,\n    lng: PropTypes.number.isRequired\n  }),\n  onChange: PropTypes.func.isRequired\n};\n\nexport default ReactMapsAreaSelection;","import React from 'react'\n\nimport ReactMapsAreaSelection from 'react-maps-area-selection'\nimport 'react-maps-area-selection/dist/index.css'\n\nconst App = () => {\n  const [vertex, setVertex] = React.useState<number[]>([]);\n  return (\n    <div>\n      <ReactMapsAreaSelection \n            options={{\n              width: '100%',\n              height: \"400px\",\n            }} \n            apiKey=\"putyourkeyhere\"\n            onChange={(vertex : number[]) => setVertex(vertex)}\n             />\n\n      <textarea \n        value={vertex.toString()} \n        style={{width:'100%', height:'200px'}}>\n      </textarea>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}