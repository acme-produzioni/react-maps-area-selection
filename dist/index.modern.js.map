{"version":3,"file":"index.modern.js","sources":["../src/components/SearchCity/index.tsx","../src/gmapsUI/reset.ts","../src/index.tsx"],"sourcesContent":["import * as React from 'react'\nimport styles from './styles.css'\n\n\ninterface Props {\n   onPlaceChanged: (newCenter : google.maps.LatLngLiteral, city: string|undefined) => void\n   maps : any\n  }\n\nlet googleAutocomplete : google.maps.places.Autocomplete;\n\nconst SearchCity = ({ maps, onPlaceChanged }: Props) => {\n\n    const [googleMaps, setGoogleMaps] = React.useState();\n    const autocompleteInput = React.useRef(null);\n\n    React.useEffect(() => {             \n        if(!maps || googleMaps !== undefined || autocompleteInput.current === null) return;\n\n        setGoogleMaps(maps);\n\n        const options = {\n            //componentRestrictions: { country: \"it\" },\n            fields: [\"formatted_address\", \"geometry\", \"name\"],           \n            strictBounds: false,\n            types: [\"geocode\"],\n          } as google.maps.places.AutocompleteOptions;\n\n        googleAutocomplete = new maps.places.Autocomplete(autocompleteInput.current, options)\n\n        googleAutocomplete.addListener(\"place_changed\", placeChanged);\n\n    }, [maps, autocompleteInput.current])\n\n    function placeChanged()\n    {\n      \n      const place = googleAutocomplete.getPlace().geometry?.location;\n\n        if(place === undefined) return;\n\n        onPlaceChanged({\n            lat: place.lat(),\n            lng: place.lng()\n        }, googleAutocomplete.getPlace().name)\n    }    \n\n\n    return ( \n      <div        \n        className={styles.searchCityWrapper}>        \n          <input type=\"text\" className={styles.gmapsAutocomplete} ref={autocompleteInput}/>\n        \n      </div>\n    )\n  }\n\nexport default SearchCity;","\nconst resetButton = (controlDiv: Element) : HTMLDivElement =>\n{\n    // Set CSS for the control border.\n    const controlUI = document.createElement(\"div\");\n    controlUI.style.backgroundColor = \"#fff\";\n    controlUI.style.border = \"2px solid #fff\";\n    controlUI.style.borderRadius = \"3px\";\n    controlUI.style.boxShadow = \"0 2px 6px rgba(0,0,0,.3)\";\n    controlUI.style.cursor = \"pointer\";\n    controlUI.style.marginLeft = \"8px\";\n    controlUI.style.marginTop = \"8px\";\n    controlUI.style.marginBottom = \"22px\";\n    controlUI.style.textAlign = \"center\";\n    controlUI.title = \"Click to reset the area\";\n    controlDiv.appendChild(controlUI);\n  \n    // Set CSS for the control interior.\n    const controlText = document.createElement(\"div\");\n    controlText.style.color = \"rgb(102 102 102)\";\n    controlText.style.fontFamily = \"Roboto,Arial,sans-serif\";\n    controlText.style.fontSize = \"14px\";\n    controlText.style.lineHeight = \"25px\";\n    controlText.style.paddingLeft = \"5px\";\n    controlText.style.paddingRight = \"5px\";\n    controlText.innerHTML = \"Reset\";\n    controlUI.appendChild(controlText);\n  \n    // Setup the click event listeners: simply set the map to Chicago.\n    return controlUI;\n  }\n\nexport default  resetButton;","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport SearchCity from './components/SearchCity';\nimport GoogleMapReact from 'google-map-react';\nimport styles from './styles.module.css';\nimport PropTypes from 'prop-types';\nimport resetButton from './gmapsUI/reset';\n\ntype GMapsAPI = {\n  map: google.maps.Map, \n  maps: any\n}\n\ninterface AreaSelectionOptions {\n  width?: string|number,\n  height?: string|number,\n  strokeColor?: string,\n}\n\ninterface Props {\n  apiKey: string,\n  onChange: (vertex : google.maps.LatLngLiteral[]) => any,\n  options?: AreaSelectionOptions,  \n  center?: google.maps.LatLngLiteral\n  onPlaceChanged?: (place: any, city: string|undefined) => any,\n  polygon?: google.maps.LatLngLiteral[]\n}\n\nlet GMapsPolygon : google.maps.Polygon;\nlet GMapsAPI : GMapsAPI;\n\nconst DEFAULT_OPTIONS = {\n  width: '100%',\n  height: '400px',\n  strokeColor: '#7f101d'\n}\n\nconst ReactMapsAreaSelection = ({ apiKey, options, polygon, center = CENTER_FOLIGNO, onChange, onPlaceChanged }: Props) => {\n\n  React.useMemo( () => {\n    if(!GMapsAPI) return;\n\n    setPolygon(polygon)\n  }, [polygon])\n\n  const handleApiLoaded = (mapObj: GMapsAPI ) : void => \n  {\n    GMapsAPI = mapObj;\n\n    if(polygon){\n      const bounds = new google.maps.LatLngBounds();\n\n      polygon.map(i => bounds.extend(i))\n      \n      mapObj.map.fitBounds(bounds, 0); \n      mapObj.map.setCenter(bounds.getCenter());\n    }\n\n    setPolygon(polygon) \n    setCustomUI()\n  }\n\n  function setCustomUI()\n  {\n    const cityInput = document.createElement('div');\n    ReactDOM.render(<SearchCity \n                      maps={GMapsAPI?.maps} \n                      onPlaceChanged={placeChanged} />, cityInput);\n    GMapsAPI.map.controls[google.maps.ControlPosition.TOP_LEFT].push(cityInput);\n\n    const resetDiv = document.createElement(\"div\");\n    resetButton(resetDiv); \n    GMapsAPI.map.controls[google.maps.ControlPosition.LEFT_TOP].push(resetDiv);\n  \n\n    google.maps.event.addDomListener(resetDiv, 'click', resetPolygon);\n  }\n\n\n  async function setPolygon(customPolygon: google.maps.LatLngLiteral[]|null = null) : Promise<any>\n  {\n    const {map, maps} = GMapsAPI;\n    const {lat, lng} = map.getCenter()?.toJSON() as google.maps.LatLngLiteral;\n \n    const path = customPolygon ? customPolygon : [\n      new maps.LatLng(lat+0.01, lng+0.01),\n      new maps.LatLng(lat+0.01, lng-0.01),\n      new maps.LatLng(lat-0.01, lng-0.01),\n      new maps.LatLng(lat-0.01, lng+0.01)\n    ] \n\n    if(GMapsPolygon) GMapsPolygon.setMap(null)\n\n    GMapsPolygon = new maps.Polygon({\n      path: path,\n      editable: true,\n      draggable: false,\n      strokeColor: options?.strokeColor||DEFAULT_OPTIONS.strokeColor,\n      strokeOpacity: 1.0,\n      strokeWeight: 2,\n      map: map\n    });\n\n\n\n    class DeleteMenu extends google.maps.OverlayView { \n\n      private div_: HTMLDivElement;\n      private divListener_?: google.maps.MapsEventListener;\n    \n      constructor() { \n        super();\n        this.div_ = document.createElement(\"div\");\n        this.div_.className = styles.deleteMenu;\n        this.div_.innerHTML = `Elimina`;\n    \n        const menu = this;\n        google.maps.event.addDomListener(this.div_, \"click\", () => {\n          menu.removeVertex();\n        });\n      }\n    \n      onAdd() {\n        const deleteMenu = this;\n        const map = this.getMap() as google.maps.Map;\n        this.getPanes()!.floatPane.appendChild(this.div_);\n    \n        // mousedown anywhere on the map except on the menu div will close the\n        // menu.\n        this.divListener_ = google.maps.event.addDomListener(\n          map.getDiv(),\n          \"mousedown\",\n          (e: Event) => {\n            if (e.target != deleteMenu.div_) {\n              deleteMenu.close();\n            }\n          },\n          true\n        );\n      }\n    \n      onRemove() {\n        if (this.divListener_) {\n          google.maps.event.removeListener(this.divListener_);\n        }\n    \n        (this.div_.parentNode as HTMLElement).removeChild(this.div_);\n    \n        // clean up\n        this.set(\"position\", null);\n        this.set(\"path\", null);\n        this.set(\"vertex\", null);\n      }\n    \n      close() {\n        this.setMap(null);\n      }\n    \n      draw() {\n        const position = this.get(\"position\");\n        const projection = this.getProjection();\n    \n        if (!position || !projection) {\n          return;\n        }\n    \n        const point = projection.fromLatLngToDivPixel(position)!;\n        this.div_.style.top = point.y + \"px\";\n        this.div_.style.left = point.x + \"px\";\n      }\n    \n      /**\n       * Opens the menu at a vertex of a given path.\n       */\n      open(\n        map: google.maps.Map,\n        path: google.maps.MVCArray<google.maps.LatLng>,\n        vertex: number\n      ) {\n        this.set(\"position\", path.getAt(vertex));\n        this.set(\"path\", path);\n        this.set(\"vertex\", vertex);\n        this.setMap(map);\n        this.draw();\n      }\n    \n      /**\n       * Deletes the vertex from the path.\n       */\n      removeVertex() {\n        const path = this.get(\"path\");\n        const vertex = this.get(\"vertex\");\n    \n        if (!path || vertex == undefined) {\n          this.close();\n          return;\n        }\n    \n        path.removeAt(vertex);\n        this.close();\n      }\n    }    \n\n    const deleteMenu = new DeleteMenu();\n\n\n    maps.event.addListener(GMapsPolygon, \"mouseup\", (e:any) : boolean => {\n      polygonChanged()\n     \n      if (e.vertex == undefined || GMapsPolygon.getPath().getLength() < 4) {\n        return true;\n      }\n      deleteMenu.open(map, GMapsPolygon.getPath(), e.vertex);\n      return true;\n    });\n\n  }\n\n  function placeChanged(newCenter : google.maps.LatLngLiteral, city: string|undefined)\n  {\n    if(!GMapsAPI) return \n\n    GMapsAPI.map.setCenter(newCenter);\n\n    if(onPlaceChanged) onPlaceChanged(newCenter, city);\n\n    setPolygon()\n  }\n\n  const resetPolygon = () => \n  {\n    if(!GMapsAPI) return;\n\n    setPolygon()\n    polygonChanged();\n  }\n\n  function polygonChanged()\n  {\n    onChange(getVertexPoints())\n  }\n\n  \n  function getVertexPoints() : google.maps.LatLngLiteral[] {\n    // Since this polygon has only one path, we can call getPath() to return the\n    // MVCArray of LatLngs.\n    const vertices = GMapsPolygon.getPath();\n    const verticiesObj : google.maps.LatLngLiteral[] = [];\n  \n    // Iterate over the vertices.\n    for (let i = 0; i < vertices.getLength(); i++)\n      verticiesObj.push({\n        lat: vertices.getAt(i).lat(), \n        lng:  vertices.getAt(i).lng()\n      });  \n    \n   \n    return verticiesObj;\n  } \n\n  return ( \n    <div \n      className={styles.mapWrapper}        \n      style={{\n        width: options?.width||DEFAULT_OPTIONS.width, \n        height: options?.height||DEFAULT_OPTIONS.height\n      }}\n    >\n      <GoogleMapReact\n        bootstrapURLKeys={{ \n          key: apiKey,\n          libraries: [\"places\", \"visualization\"] \n        }}\n        defaultCenter={center}\n        defaultZoom={12}\n        yesIWantToUseGoogleMapApiInternals\n        onGoogleApiLoaded={handleApiLoaded}\n      >\n\n      </GoogleMapReact>\n    </div>\n  )\n}\n\n\n\nconst CENTER_FOLIGNO = {lat: 42.958433, lng: 12.709864}\n\nReactMapsAreaSelection.propTypes = {\n  apiKey: PropTypes.string.isRequired,\n  options: PropTypes.shape({\n    width: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    height: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]),\n    strokeColor: PropTypes.string,\n  }),\n  center: PropTypes.exact({\n    lat: PropTypes.number.isRequired,\n    lng: PropTypes.number.isRequired\n  }),\n  onChange: PropTypes.func.isRequired\n};\n\nexport default ReactMapsAreaSelection;"],"names":["googleAutocomplete","SearchCity","maps","onPlaceChanged","React","googleMaps","setGoogleMaps","autocompleteInput","undefined","current","options","fields","strictBounds","types","places","Autocomplete","addListener","placeChanged","place","getPlace","geometry","location","lat","lng","name","className","styles","searchCityWrapper","type","gmapsAutocomplete","ref","resetButton","controlDiv","controlUI","document","createElement","style","backgroundColor","border","borderRadius","boxShadow","cursor","marginLeft","marginTop","marginBottom","textAlign","title","appendChild","controlText","color","fontFamily","fontSize","lineHeight","paddingLeft","paddingRight","innerHTML","GMapsPolygon","GMapsAPI","DEFAULT_OPTIONS","width","height","strokeColor","ReactMapsAreaSelection","setPolygon","customPolygon","map","getCenter","toJSON","path","LatLng","setMap","Polygon","editable","draggable","strokeOpacity","strokeWeight","DeleteMenu","div_","deleteMenu","menu","google","event","addDomListener","removeVertex","onAdd","getMap","getPanes","floatPane","divListener_","getDiv","e","target","close","onRemove","removeListener","parentNode","removeChild","set","draw","position","get","projection","getProjection","point","fromLatLngToDivPixel","top","y","left","x","open","vertex","getAt","removeAt","OverlayView","polygonChanged","getPath","getLength","apiKey","polygon","center","CENTER_FOLIGNO","onChange","handleApiLoaded","mapObj","bounds","LatLngBounds","i","extend","fitBounds","setCenter","setCustomUI","cityInput","ReactDOM","render","controls","ControlPosition","TOP_LEFT","push","resetDiv","LEFT_TOP","resetPolygon","newCenter","city","getVertexPoints","vertices","verticiesObj","mapWrapper","GoogleMapReact","bootstrapURLKeys","key","libraries","defaultCenter","defaultZoom","yesIWantToUseGoogleMapApiInternals","onGoogleApiLoaded","propTypes","PropTypes","string","isRequired","shape","oneOfType","number","exact","func"],"mappings":"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"}